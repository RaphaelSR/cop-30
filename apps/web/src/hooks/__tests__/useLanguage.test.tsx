import { describe, it, expect, beforeEach, vi } from 'vitest'
import { renderHook, act } from '../../test/test-utils'
import { useLanguage, LanguageProvider } from '../useLanguage'
import { createLocalStorageMock } from '../../test/test-utils'

describe('useLanguage Hook', () => {
  let localStorageMock: ReturnType<typeof createLocalStorageMock>

  beforeEach(() => {
    localStorageMock = createLocalStorageMock()
    Object.defineProperty(window, 'localStorage', {
      value: localStorageMock,
      writable: true
    })
  })

  describe('InicializaÃ§Ã£o', () => {
    it('deve inicializar com portuguÃªs como idioma padrÃ£o', () => {
      const { result } = renderHook(() => useLanguage(), {
        wrapper: LanguageProvider
      })

      expect(result.current.currentLanguage).toBe('pt')
    })

    it('deve fornecer lista de idiomas disponÃ­veis', () => {
      const { result } = renderHook(() => useLanguage(), {
        wrapper: LanguageProvider
      })

      expect(result.current.languages).toEqual([
        { code: 'pt', name: 'PortuguÃªs', flag: 'ðŸ‡§ðŸ‡·', nativeName: 'PortuguÃªs' },
        { code: 'en', name: 'English', flag: 'ðŸ‡ºðŸ‡¸', nativeName: 'English' }
      ])
    })
  })

  describe('MudanÃ§a de idioma', () => {
    it('deve alterar idioma para inglÃªs', () => {
      const { result } = renderHook(() => useLanguage(), {
        wrapper: LanguageProvider
      })

      act(() => {
        result.current.changeLanguage('en')
      })

      expect(result.current.currentLanguage).toBe('en')
    })

    it('deve alterar idioma para portuguÃªs', () => {
      const { result } = renderHook(() => useLanguage(), {
        wrapper: LanguageProvider
      })

      // Muda para inglÃªs primeiro
      act(() => {
        result.current.changeLanguage('en')
      })

      // Depois volta para portuguÃªs
      act(() => {
        result.current.changeLanguage('pt')
      })

      expect(result.current.currentLanguage).toBe('pt')
    })
  })

  describe('FunÃ§Ã£o de traduÃ§Ã£o', () => {
    it('deve retornar traduÃ§Ã£o em portuguÃªs', () => {
      const { result } = renderHook(() => useLanguage(), {
        wrapper: LanguageProvider
      })

      const translation = result.current.t('nav.home')
      expect(translation).toBe('Home')
    })

    it('deve retornar traduÃ§Ã£o em inglÃªs', () => {
      const { result } = renderHook(() => useLanguage(), {
        wrapper: LanguageProvider
      })

      act(() => {
        result.current.changeLanguage('en')
      })

      const translation = result.current.t('nav.home')
      expect(translation).toBe('Home')
    })

    it('deve retornar chave se traduÃ§Ã£o nÃ£o existir', () => {
      const { result } = renderHook(() => useLanguage(), {
        wrapper: LanguageProvider
      })

      const translation = result.current.t('inexistent.key')
      expect(translation).toBe('inexistent.key')
    })

    it('deve suportar traduÃ§Ãµes aninhadas', () => {
      const { result } = renderHook(() => useLanguage(), {
        wrapper: LanguageProvider
      })

      const translation = result.current.t('nav.guides')
      expect(translation).toBe('Guias')
    })
  })

  describe('Tratamento de erros', () => {
    it('deve lanÃ§ar erro quando usado fora do provider', () => {
      expect(() => {
        renderHook(() => useLanguage())
      }).toThrow('useLanguage must be used within a LanguageProvider')
    })
  })
})
